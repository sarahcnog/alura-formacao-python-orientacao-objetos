# -*- coding: utf-8 -*-
"""Continuando com Collections

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtL_EuFnuO_ew6sSU6IelRaHf2Thv05t
"""

usuarios_da_science = [15, 23, 43, 56]
usuarios_machine_learning = [13, 23, 56, 42]

assistiram = []
assistiram.extend(usuarios_da_science)
assistiram

assistiram = usuarios_da_science.copy()
assistiram

assistiram.extend(usuarios_machine_learning)
assistiram

len(assistiram)

set(assistiram)

set([1,2,3,1])

{4,1,2,3,1}

type({1,2})

usuarios_da_science = {15, 23, 43, 56}
usuarios_machine_learning = {13, 23, 56, 42}

usuarios_machine_learning[3]

for usuario in set(assistiram):
  print(usuario)

usuarios_data_science = {15, 23, 43, 56}
usuarios_machine_learning = {13, 23, 56, 42}

usuarios_data_science | usuarios_machine_learning

usuarios_data_science & usuarios_machine_learning

usuarios_data_science - usuarios_machine_learning

fez_ds_mas_nao_fez_ml = usuarios_data_science - usuarios_machine_learning
15 in fez_ds_mas_nao_fez_ml

usuarios_data_science ^ usuarios_machine_learning

usuarios = {1,5,76,34,52,13,17}
len(usuarios)

usuarios.append(13)
len(usuarios)

usuarios.add(13)
len(usuarios)

usuarios.add(765)
len(usuarios)

usuarios

usuarios = frozenset(usuarios)
usuarios

type(usuarios)

usuarios.add(134)

meu_texto = "Bem vindo meu nome é Guilherme eu gosto muito de nomes e tenho o meu cachorro e gosto muito de cachorro"
meu_texto.split()

set(meu_texto.split())

"""#Dicionário (Mapa, etc)"""

aparicoes = {
  "Guilherme": 1,
  "cachorro": 2,
  "nome": 2,
  "vinho": 1
}

type(aparicoes)

aparicoes["Guilherme"]

aparicoes["cachorro"]

aparicoes["xpto"]

aparicoes.get("xpto", 0)

aparicoes.get("cachorro", 0)

aparicoes = dict(Guilherme = 2, cachorro = 1)
aparicoes

aparicoes = {
  "Guilherme": 1,
  "cachorro": 2,
  "nome": 2,
  "vinho": 1
}

aparicoes["Carlos"] = 1
aparicoes

aparicoes["Carlos"] = 2
aparicoes

del aparicoes["Carlos"]
aparicoes

"cachorro" in aparicoes

"Carlos" in aparicoes

for elemento in aparicoes:
  print(elemento)

for elemento in aparicoes.keys():
  print(elemento)

for elemento in aparicoes.values():
  print(elemento)

1 in aparicoes.values()

for elemento in aparicoes.keys():
  print(elemento, aparicoes[elemento])

for elemento in aparicoes.keys():
  valor = aparicoes[elemento]
  print(elemento, valor)

for elemento in aparicoes.items():
  print(elemento)

for chave, valor in aparicoes.items():
  print(chave, "=", valor)

["palavra {}".format(chave) for chave in aparicoes.keys()]

meu_texto = "Bem vindo meu nome é Guilherme eu gosto muito de nomes e tenho o meu cachorro e gosto muito de cachorro"
meu_texto = meu_texto.lower()

aparicoes = {}

for palavra in meu_texto.split():
  ate_agora = aparicoes.get(palavra, 0)
  aparicoes[palavra] = ate_agora + 1

aparicoes

from collections import defaultdict

aparicoes = defaultdict(int)

for palavra in meu_texto.split():
  ate_agora = aparicoes[palavra]
  aparicoes[palavra] = ate_agora + 1

aparicoes

dicionario = defaultdict(int)
dicionario['guilherme']

dicionario['guilherme'] = 15
dicionario['guilherme']

from collections import defaultdict

aparicoes = defaultdict(int)

for palavra in meu_texto.split():
  aparicoes[palavra] += 1

aparicoes

class Conta:
  def __init__(self):
    print("Criando um conta")

contas = defaultdict(Conta)
contas[15]

contas[17]

from collections import Counter

aparicoes = Counter()
for palavra in meu_texto.split():
  aparicoes[palavra] += 1

aparicoes

aparicoes = Counter(meu_texto.split())
aparicoes

"""# Testando o uso de diversas coleções"""

texto1 = """
Foi usada uma linguagem mais formal do que a B2C porque quando estamos lidando com empresas temos que ser mais práticos e mostrar exatamente o que a empresa ganha, e, no caso, até como poderia ganhar mais depois.

Além dessa mudança na linguagem, tivemos ideias diferentes de conteúdo. No B2C foram apresentados conhecimentos a respeito de cada taxa, para que a pessoa entenda o que está pagando e confie em empresas que não cobra as taxas.

Agora para B2B foram apresentadas formas para economizar no cartão, pois, muitas vezes, os empresários sabem o que é cada taxa do cartão e tem que utilizá-lo mesmo assim. Então, mostramos como ele pode economizar e, uma dessas formas, é usar o cartão da ByteBank.

Nesse mesmo texto para B2B também acrescentamos o conteúdo de outra vantagem do cartão: poder determinar um limite de gastos para cada categoria nos cartões dos funcionários da empresa.

Dessa forma, os funcionários não podem gastar mais do que o determinado e, assim, a empresa consegue economizar e planejar os gastos e não extrapolar com compras dos funcionários.

O foco da comunicação B2B que utilizamos foi dar dicas para não cometer erros e economizar mais, para que a empresa perceba que utilizar o cartão é vantagem.

E caso a sua empresa seja diferente da ByteBank, seja só B2B e não tenha nenhum plano de comunicação focado para B2C para se basear?

Existem diversas empresas B2B:

as que vendem tanto para B2B quanto para B2C, como a ByteBank;
as que vendem para ambos os consumidores, mas possuem um foco maior no B2B, como a Marmotex, que tem como serviço entrega de marmitas e entregam tanto para consumidores quanto empresas, mas possuem um foco maior em organizações e catering para eventos, ou seja, B2B
as empresas somente B2B, como as de agências de publicidade.
Cada uma das empresas que são B2B possui um produto e um serviço para mostrar.

Então, caso você trabalhe em uma empresa que não possui um plano de marketing de conteúdo para B2C para se basear, é só seguir a ideia do marketing de conteúdo, de passar informações relacionados a sua empresa, tornando-a uma autoridade no assunto. E, além disso, mostrar maneiras que o seu produto e/ou serviço pode ajudar a empresa em determinado tema.

No B2B, como no marketing de conteúdo focado no B2C, é importante frisar a importância e a relevância do produto e/ou serviço para o cliente. E, melhor, a longo prazo.

A empresa cliente precisa entender e saber que a vantagem trazida pelo produto será duradoura. Pois o processo de compra B2B é mais longo justamente porque há muito em jogo e muitas pessoas envolvidas.

Mudar de produto ou serviço é trabalhoso e pode causar prejuízo para a empresa, assim, eles buscam e precisam de garantias de que a solução funcionará por muito tempo.

Assim, como no marketing B2C, os tipos de conteúdo devem se atentar aos clientes em cada fase do funil de marketing de conteúdo para trazer o conteúdo certo para a empresa em cada momento da obtenção do cartão.

Para isso, a Bytebank utilizou dados, números, infográficos e mostrou com exemplos práticos maneiras de ajudar a contratante. Também escreveu conteúdos com histórias de empresas - os chamados cases de sucesso - que obtiveram lucro ou sucesso com o produto/serviço.

Além disso, apresentou novidades e dicas tanto da sua empresa, que passou a fornecer uma conta para pessoas físicas e jurídicas, quanto do segmento dela, com informações que podem ser úteis ao cliente do setor financeiro.

Como vimos, as principais diferenças entre os conteúdos B2C para o B2B são a linguagem, que deve ser mais formal se for B2B e apelar para o emocional se for B2C.

No B2B você estará lidando com pessoas que tomam decisões nas empresas, então deverá mostrar como o produto pode ajudar a empresa, de preferência a longo prazo.

Fora isso, o tipo de conteúdo pode ser o mesmo do marketing de conteúdo B2C. Passando desde textos sobre novidades, inovações e dicas na área, até infográficos com dados de pesquisas, vídeos, áudios de podcast, imagens e publicações nas redes sociais.

Também, para conteúdo B2B, é muito comum encontrar whitepapers, grupos de usuários, meetups, cases de sucesso, trial gratuito, e até mesmo vídeos ou campanhas e posts de marketing com influenciadores.

Agora, se você quiser saber mais sobre marketing de conteúdo, pode fazer nosso curso de Marketing de Conteúdo e, também, conferir mais informações no livro da Casa do Código, Marketing de Conteúdo: Estratégias para entregar o que seu público quer consumir.
"""

texto2 = """
Comecei a estudar Java recentemente na Alura e conforme o tempo foi passando descobri o que são IDE’s e para que servem. Depois de testar algumas delas como IntelliJ e Netbeans, optei por utilizar o Eclipse como minha IDE principal, porque me senti mais confortável com ela.

Depois de algum tempo clicando nos ícones para salvar arquivos, gerar classes, e mais algumas outras operações, comecei a pensar se o Eclipse teria atalhos para fazer esses tipos de tarefa para mim, pois eu não estava me sentindo muito produtivo durante o desenvolvimento.

Então comecei a pesquisar sobre os atalhos do Eclipse e me deparei com um keysmap, ou mapa de teclas, onde se encontram todos os atalhos do Eclipse.O que vamos fazer agora é criar uma pequena aplicação onde vamos testar alguns dos atalhos mais utilizados no dia a dia. Criando getter e setters

A primeira coisa que precisamos fazer é criar nossa classe Desenvolvedor que contém os atributos: nome, endereco, idade.
"""

for x in "guilherme":
  print(x)

Counter(texto1.lower())

aparicoes = Counter(texto1.lower())
total_de_caracteres = sum(aparicoes.values())
for letra, frequencia in aparicoes.items():
  tupla = (letra, frequencia / total_de_caracteres)
  print(tupla)

aparicoes = Counter(texto1.lower())
total_de_caracteres = sum(aparicoes.values())

[(letra, frequencia / total_de_caracteres) for letra, frequencia in aparicoes.items()]

aparicoes = Counter(texto1.lower())
total_de_caracteres = sum(aparicoes.values())

proporcoes = [(letra, frequencia / total_de_caracteres) for letra, frequencia in aparicoes.items()]
proporcoes = dict(proporcoes)
proporcoes

def analisa_frequencia_de_letras(texto):
  aparicoes = Counter(texto.lower())
  total_de_caracteres = sum(aparicoes.values())

  proporcoes = [(letra, frequencia / total_de_caracteres) for letra, frequencia in aparicoes.items()]
  proporcoes = Counter(dict(proporcoes))
  mais_comuns = proporcoes.most_common(10)
  for caractere, proporcao in mais_comuns:
    print("{} => {:.2f}%".format(caractere, proporcao*100))

analisa_frequencia_de_letras(texto1)

analisa_frequencia_de_letras(texto2)

